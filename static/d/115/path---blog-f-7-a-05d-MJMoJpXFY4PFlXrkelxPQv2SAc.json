{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"9a36dbc5-5381-57c4-860b-95fa6a43bef9","html":"<p>The value of an item with an integral type is the mathematical integer that it corresponds to. Integral types may be unsigned (capable of representing only non-negative integers) or signed (capable of representing negative integers as well).[1]</p>\n<p>An integer value is typically specified in the source code of a program as a sequence of digits optionally prefixed with + or −. Some programming languages allow other notations, such as hexadecimal (base 16) or octal (base 8). Some programming languages also permit digit group separators.[2]</p>\n<p>The internal representation of this datum is the way the value is stored in the computer's memory. Unlike mathematical integers, a typical datum in a computer has some minimal and maximum possible value.</p>\n<p>The most common representation of a positive integer is a string of bits, using the binary numeral system. The order of the memory bytes storing the bits varies; see endianness. The width or precision of an integral type is the number of bits in its representation. An integral type with n bits can encode 2n numbers; for example an unsigned type typically represents the non-negative values 0 through 2n−1. Other encodings of integer values to bit patterns are sometimes used, for example binary-coded decimal or Gray code, or as printed character codes such as ASCII.</p>\n<p>There are four well-known ways to represent signed numbers in a binary computing system. The most common is two's complement, which allows a signed integral type with n bits to represent numbers from −2(n−1) through 2(n−1)−1. Two's complement arithmetic is convenient because there is a perfect one-to-one correspondence between representations and values (in particular, no separate +0 and −0), and because addition, subtraction and multiplication do not need to distinguish between signed and unsigned types. Other possibilities include offset binary, sign-magnitude, and ones' complement.</p>\n<p>Some computer languages define integer sizes in a machine-independent way; others have varying definitions depending on the underlying processor word size. Not all language implementations define variables of all integer sizes, and defined sizes may not even be distinct in a particular implementation. An integer in one programming language may be a different size in a different language or on a different processor. </p>","excerpt":"The value of an item with an integral type is the mathematical integer that it corresponds to. Integral types may be unsigned (capable of representing only non-negative integers) or signed (capable of representing negative integers as well). 1 An integer value is typically specified in the source…","frontmatter":{"title":"Tales of Marsupials: REVIEW","date":"January 02, 2019","path":"/blog/post2"}}},{"node":{"id":"c78a8819-7c74-5f72-99c6-c6b8862314bf","html":"<p>content for blog post  </p>\n<h1>content here</h1>\n<h2>more stuff</h2>\n<pre><code>stuff in code block\n</code></pre>","excerpt":"content for blog post   content here more stuff","frontmatter":{"title":"blog post title","date":"January 01, 2019","path":"/blog/post1"}}}]}},"pageContext":{}}